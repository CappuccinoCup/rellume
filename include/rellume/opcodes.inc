/**
 * This file is part of Rellume.
 *
 * (c) 2019, Alexis Engelke <alexis.engelke@googlemail.com>
 *
 * Rellume is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL)
 * as published by the Free Software Foundation, either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Rellume is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Rellume.  If not, see <http://www.gnu.org/licenses/>.
 */

DEF_IT(NOP,)

DEF_IT(PUSH, state.LiftPush(inst))
DEF_IT(PUSHFQ, state.LiftPushf(inst))
DEF_IT(POP, state.LiftPop(inst))
DEF_IT(LEAVE, state.LiftLeave(inst))
DEF_IT(CALL, state.LiftCall(inst))
DEF_IT(RET, state.LiftRet(inst))
DEF_IT(SYSCALL, goto not_implemented)
DEF_IT(CPUID, goto not_implemented)
DEF_IT(RDTSC, goto not_implemented)

// Defined in llinstruction-gp.c
DEF_IT(MOV, state.LiftMovgp(inst, llvm::Instruction::SExt))
DEF_IT(MOVZX, state.LiftMovgp(inst, llvm::Instruction::ZExt))
DEF_IT(MOVSX, state.LiftMovgp(inst, llvm::Instruction::SExt))
DEF_IT(ADD, state.LiftAdd(inst))
DEF_IT(SUB, state.LiftSub(inst))
DEF_IT(CMP, state.LiftCmp(inst))
DEF_IT(CMPXCHG, state.LiftCmpxchg(inst))
DEF_IT(LEA, state.LiftLea(inst))
DEF_IT(NOT, state.LiftNot(inst))
DEF_IT(NEG, state.LiftNeg(inst))
DEF_IT(INC, state.LiftIncDec(inst))
DEF_IT(DEC, state.LiftIncDec(inst))
DEF_IT(AND, state.LiftAndOrXor(inst, llvm::Instruction::And))
DEF_IT(OR, state.LiftAndOrXor(inst, llvm::Instruction::Or))
DEF_IT(XOR, state.LiftAndOrXor(inst, llvm::Instruction::Xor))
DEF_IT(TEST, state.LiftAndOrXor(inst, llvm::Instruction::And, /*wb=*/false))
DEF_IT(IMUL, state.LiftMul(inst))
DEF_IT(MUL, state.LiftMul(inst))
DEF_IT(IDIV, state.LiftDiv(inst))
DEF_IT(DIV, state.LiftDiv(inst))
DEF_IT(SHL, state.LiftShift(inst, llvm::Instruction::Shl))
DEF_IT(SHR, state.LiftShift(inst, llvm::Instruction::LShr))
DEF_IT(SAR, state.LiftShift(inst, llvm::Instruction::AShr))
DEF_IT(CLTQ, state.LiftCdqe(inst))

DEF_IT(CLD, state.LiftCld(inst))
DEF_IT(STD, state.LiftStd(inst))
DEF_IT(STOS, state.LiftStos(inst))
DEF_IT(REP_STOS, state.LiftStos(inst))
DEF_IT(MOVS, state.LiftMovs(inst))
DEF_IT(REP_MOVS, state.LiftMovs(inst))

DEF_IT(CMOVO, state.LiftCmovcc(inst, Condition::O))
DEF_IT(CMOVNO, state.LiftCmovcc(inst, Condition::NO))
DEF_IT(CMOVC, state.LiftCmovcc(inst, Condition::C))
DEF_IT(CMOVNC, state.LiftCmovcc(inst, Condition::NC))
DEF_IT(CMOVZ, state.LiftCmovcc(inst, Condition::Z))
DEF_IT(CMOVNZ, state.LiftCmovcc(inst, Condition::NZ))
DEF_IT(CMOVBE, state.LiftCmovcc(inst, Condition::BE))
DEF_IT(CMOVA, state.LiftCmovcc(inst, Condition::A))
DEF_IT(CMOVS, state.LiftCmovcc(inst, Condition::S))
DEF_IT(CMOVNS, state.LiftCmovcc(inst, Condition::NS))
DEF_IT(CMOVP, state.LiftCmovcc(inst, Condition::P))
DEF_IT(CMOVNP, state.LiftCmovcc(inst, Condition::NP))
DEF_IT(CMOVL, state.LiftCmovcc(inst, Condition::L))
DEF_IT(CMOVGE, state.LiftCmovcc(inst, Condition::GE))
DEF_IT(CMOVLE, state.LiftCmovcc(inst, Condition::LE))
DEF_IT(CMOVG, state.LiftCmovcc(inst, Condition::G))

DEF_IT(SETO, state.LiftSetcc(inst, Condition::O))
DEF_IT(SETNO, state.LiftSetcc(inst, Condition::NO))
DEF_IT(SETC, state.LiftSetcc(inst, Condition::C))
DEF_IT(SETNC, state.LiftSetcc(inst, Condition::NC))
DEF_IT(SETZ, state.LiftSetcc(inst, Condition::Z))
DEF_IT(SETNZ, state.LiftSetcc(inst, Condition::NZ))
DEF_IT(SETBE, state.LiftSetcc(inst, Condition::BE))
DEF_IT(SETA, state.LiftSetcc(inst, Condition::A))
DEF_IT(SETS, state.LiftSetcc(inst, Condition::S))
DEF_IT(SETNS, state.LiftSetcc(inst, Condition::NS))
DEF_IT(SETP, state.LiftSetcc(inst, Condition::P))
DEF_IT(SETNP, state.LiftSetcc(inst, Condition::NP))
DEF_IT(SETL, state.LiftSetcc(inst, Condition::L))
DEF_IT(SETGE, state.LiftSetcc(inst, Condition::GE))
DEF_IT(SETLE, state.LiftSetcc(inst, Condition::LE))
DEF_IT(SETG, state.LiftSetcc(inst, Condition::G))

// Defined in llinstruction-sse.c
DEF_IT(MOVD, state.LiftSseMovq(inst, Facet::I32))
DEF_IT(MOVQ, state.LiftSseMovq(inst, Facet::I64))
DEF_IT(MOVSS, state.LiftSseMovScalar(inst, Facet::F32))
DEF_IT(MOVSD, state.LiftSseMovScalar(inst, Facet::F64))
DEF_IT(MOVUPS, state.LiftSseMovdq(inst, Facet::V4F32, ALIGN_NONE))
DEF_IT(MOVUPD, state.LiftSseMovdq(inst, Facet::V2F64, ALIGN_NONE))
DEF_IT(MOVAPS, state.LiftSseMovdq(inst, Facet::V4F32, ALIGN_MAX))
DEF_IT(MOVAPD, state.LiftSseMovdq(inst, Facet::V2F64, ALIGN_MAX))
DEF_IT(MOVDQU, state.LiftSseMovdq(inst, Facet::I128, ALIGN_NONE))
DEF_IT(MOVDQA, state.LiftSseMovdq(inst, Facet::I128, ALIGN_MAX))
DEF_IT(MOVLPS, state.LiftSseMovlp(inst))
DEF_IT(MOVLPD, state.LiftSseMovlp(inst))
DEF_IT(MOVHPS, state.LiftSseMovhps(inst))
DEF_IT(MOVHPD, state.LiftSseMovhpd(inst))
DEF_IT(UNPCKLPS, state.LiftSseUnpck(inst, Facet::V4F32))
DEF_IT(UNPCKLPD, state.LiftSseUnpck(inst, Facet::V2F64))
DEF_IT(UNPCKHPS, state.LiftSseUnpck(inst, Facet::V4F32))
DEF_IT(UNPCKHPD, state.LiftSseUnpck(inst, Facet::V2F64))
DEF_IT(SHUFPS, state.LiftSseShufps(inst))
DEF_IT(INSERTPS, state.LiftSseInsertps(inst))
DEF_IT(ADDSS, state.LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::F32))
DEF_IT(ADDSD, state.LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::F64))
DEF_IT(ADDPS, state.LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::VF32))
DEF_IT(ADDPD, state.LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::VF64))
DEF_IT(SUBSS, state.LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::F32))
DEF_IT(SUBSD, state.LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::F64))
DEF_IT(SUBPS, state.LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::VF32))
DEF_IT(SUBPD, state.LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::VF64))
DEF_IT(MULSS, state.LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::F32))
DEF_IT(MULSD, state.LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::F64))
DEF_IT(MULPS, state.LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::VF32))
DEF_IT(MULPD, state.LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::VF64))
DEF_IT(DIVSS, state.LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::F32))
DEF_IT(DIVSD, state.LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::F64))
DEF_IT(DIVPS, state.LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::VF32))
DEF_IT(DIVPD, state.LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::VF64))
DEF_IT(ORPS, state.LiftSseBinOp(inst, llvm::Instruction::Or, Facet::VI32))
DEF_IT(ORPD, state.LiftSseBinOp(inst, llvm::Instruction::Or, Facet::VI64))
DEF_IT(ANDPS, state.LiftSseBinOp(inst, llvm::Instruction::And, Facet::VI32))
DEF_IT(ANDPD, state.LiftSseBinOp(inst, llvm::Instruction::And, Facet::VI64))
DEF_IT(XORPS, state.LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI32))
DEF_IT(XORPD, state.LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI64))

DEF_IT(PXOR, state.LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI64))
DEF_IT(PCMPEQB, state.LiftSsePcmpeqb(inst))
DEF_IT(PMOVMSKB, state.LiftSsePmovmskb(inst))

// Jumps are handled in the basic block generation code.
DEF_IT(JMP, state.LiftJmp(inst))
DEF_IT(JO, state.LiftJcc(inst, Condition::O))
DEF_IT(JNO, state.LiftJcc(inst, Condition::NO))
DEF_IT(JC, state.LiftJcc(inst, Condition::C))
DEF_IT(JNC, state.LiftJcc(inst, Condition::NC))
DEF_IT(JZ, state.LiftJcc(inst, Condition::Z))
DEF_IT(JNZ, state.LiftJcc(inst, Condition::NZ))
DEF_IT(JBE, state.LiftJcc(inst, Condition::BE))
DEF_IT(JA, state.LiftJcc(inst, Condition::A))
DEF_IT(JS, state.LiftJcc(inst, Condition::S))
DEF_IT(JNS, state.LiftJcc(inst, Condition::NS))
DEF_IT(JP, state.LiftJcc(inst, Condition::P))
DEF_IT(JNP, state.LiftJcc(inst, Condition::NP))
DEF_IT(JL, state.LiftJcc(inst, Condition::L))
DEF_IT(JGE, state.LiftJcc(inst, Condition::GE))
DEF_IT(JLE, state.LiftJcc(inst, Condition::LE))
DEF_IT(JG, state.LiftJcc(inst, Condition::G))
