/**
 * This file is part of Rellume.
 *
 * (c) 2019, Alexis Engelke <alexis.engelke@googlemail.com>
 *
 * Rellume is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License (LGPL)
 * as published by the Free Software Foundation, either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * Rellume is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Rellume.  If not, see <http://www.gnu.org/licenses/>.
 */

DEF_IT(NOP,)
DEF_IT(RDSSP,)
// Intel MPX, behave as NOP on processors without support (SDM Vol 1, 17.4)
DEF_IT(BNDLDX,)
DEF_IT(BNDMOV,)
DEF_IT(BNDCU,)
DEF_IT(BNDCL,)
DEF_IT(BNDSTX,)
DEF_IT(BNDCN,)
DEF_IT(BNDMK,)

DEF_IT(PUSH, LiftPush(inst))
DEF_IT(PUSHF, LiftPushf(inst))
DEF_IT(POPF, LiftPopf(inst))
DEF_IT(POP, LiftPop(inst))
DEF_IT(LEAVE, LiftLeave(inst))
DEF_IT(CALL, LiftCall(inst))
DEF_IT(RET, LiftRet(inst))
DEF_IT(SYSCALL, goto not_implemented)
DEF_IT(CPUID, goto not_implemented)
DEF_IT(RDTSC, goto not_implemented)
DEF_IT(CRC32, goto not_implemented)
DEF_IT(UD2, LiftUnreachable(inst))

DEF_IT(LAHF, LiftLahf(inst))
DEF_IT(SAHF, LiftSahf(inst))

// Defined in llinstruction-gp.c
DEF_IT(MOV, LiftMovgp(inst, llvm::Instruction::SExt))
DEF_IT(MOVABS, LiftMovgp(inst, llvm::Instruction::SExt))
DEF_IT(MOVZX, LiftMovgp(inst, llvm::Instruction::ZExt))
DEF_IT(MOVSX, LiftMovgp(inst, llvm::Instruction::SExt))
// TODO: set non-temporal hint
DEF_IT(MOVNTI, LiftMovgp(inst, llvm::Instruction::SExt))
DEF_IT(MOVBE, LiftMovbe(inst))
DEF_IT(ADD, LiftArith(inst, /*sub=*/false))
DEF_IT(ADC, LiftArith(inst, /*sub=*/false))
DEF_IT(SUB, LiftArith(inst, /*sub=*/true))
DEF_IT(SBB, LiftArith(inst, /*sub=*/true))
DEF_IT(CMP, LiftArith(inst, /*sub=*/true))
DEF_IT(XADD, LiftArith(inst, /*sub=*/false))
DEF_IT(CMPXCHG, LiftCmpxchg(inst))
DEF_IT(XCHG, LiftXchg(inst))
DEF_IT(LEA, LiftLea(inst))
DEF_IT(XLATB, LiftXlat(inst))
DEF_IT(NOT, LiftNot(inst))
DEF_IT(NEG, LiftNeg(inst))
DEF_IT(INC, LiftIncDec(inst))
DEF_IT(DEC, LiftIncDec(inst))
DEF_IT(AND, LiftAndOrXor(inst, llvm::Instruction::And))
DEF_IT(OR, LiftAndOrXor(inst, llvm::Instruction::Or))
DEF_IT(XOR, LiftAndOrXor(inst, llvm::Instruction::Xor))
DEF_IT(TEST, LiftAndOrXor(inst, llvm::Instruction::And, /*wb=*/false))
DEF_IT(IMUL, LiftMul(inst))
DEF_IT(MUL, LiftMul(inst))
DEF_IT(IDIV, LiftDiv(inst))
DEF_IT(DIV, LiftDiv(inst))
DEF_IT(SHL, LiftShift(inst, llvm::Instruction::Shl))
DEF_IT(SHR, LiftShift(inst, llvm::Instruction::LShr))
DEF_IT(SAR, LiftShift(inst, llvm::Instruction::AShr))
DEF_IT(ROL, LiftRotate(inst))
DEF_IT(ROR, LiftRotate(inst))
DEF_IT(SHLD, LiftShiftdouble(inst))
DEF_IT(SHRD, LiftShiftdouble(inst))
DEF_IT(BSF, LiftBitscan(inst, /*trailing=*/true))
DEF_IT(TZCNT, LiftBitscan(inst, /*trailing=*/true)) // TODO: support TZCNT
DEF_IT(BSR, LiftBitscan(inst, /*trailing=*/false))
DEF_IT(LZCNT, LiftBitscan(inst, /*trailing=*/false)) // TODO: support LZCNT
DEF_IT(BT, LiftBittest(inst))
DEF_IT(BTC, LiftBittest(inst))
DEF_IT(BTR, LiftBittest(inst))
DEF_IT(BTS, LiftBittest(inst))
DEF_IT(BSWAP, LiftBswap(inst))
DEF_IT(C_EX, LiftCext(inst))
DEF_IT(C_SEP, LiftCsep(inst))

DEF_IT(CLC, LiftClc(inst))
DEF_IT(STC, LiftStc(inst))
DEF_IT(CMC, LiftCmc(inst))

DEF_IT(CLD, LiftCld(inst))
DEF_IT(STD, LiftStd(inst))
DEF_IT(LODS, LiftLods(inst))
DEF_IT(STOS, LiftStos(inst))
DEF_IT(MOVS, LiftMovs(inst))
DEF_IT(SCAS, LiftScas(inst))
DEF_IT(CMPS, LiftCmps(inst))

DEF_IT(CMOVO, LiftCmovcc(inst, Condition::O))
DEF_IT(CMOVNO, LiftCmovcc(inst, Condition::NO))
DEF_IT(CMOVC, LiftCmovcc(inst, Condition::C))
DEF_IT(CMOVNC, LiftCmovcc(inst, Condition::NC))
DEF_IT(CMOVZ, LiftCmovcc(inst, Condition::Z))
DEF_IT(CMOVNZ, LiftCmovcc(inst, Condition::NZ))
DEF_IT(CMOVBE, LiftCmovcc(inst, Condition::BE))
DEF_IT(CMOVA, LiftCmovcc(inst, Condition::A))
DEF_IT(CMOVS, LiftCmovcc(inst, Condition::S))
DEF_IT(CMOVNS, LiftCmovcc(inst, Condition::NS))
DEF_IT(CMOVP, LiftCmovcc(inst, Condition::P))
DEF_IT(CMOVNP, LiftCmovcc(inst, Condition::NP))
DEF_IT(CMOVL, LiftCmovcc(inst, Condition::L))
DEF_IT(CMOVGE, LiftCmovcc(inst, Condition::GE))
DEF_IT(CMOVLE, LiftCmovcc(inst, Condition::LE))
DEF_IT(CMOVG, LiftCmovcc(inst, Condition::G))

DEF_IT(SETO, LiftSetcc(inst, Condition::O))
DEF_IT(SETNO, LiftSetcc(inst, Condition::NO))
DEF_IT(SETC, LiftSetcc(inst, Condition::C))
DEF_IT(SETNC, LiftSetcc(inst, Condition::NC))
DEF_IT(SETZ, LiftSetcc(inst, Condition::Z))
DEF_IT(SETNZ, LiftSetcc(inst, Condition::NZ))
DEF_IT(SETBE, LiftSetcc(inst, Condition::BE))
DEF_IT(SETA, LiftSetcc(inst, Condition::A))
DEF_IT(SETS, LiftSetcc(inst, Condition::S))
DEF_IT(SETNS, LiftSetcc(inst, Condition::NS))
DEF_IT(SETP, LiftSetcc(inst, Condition::P))
DEF_IT(SETNP, LiftSetcc(inst, Condition::NP))
DEF_IT(SETL, LiftSetcc(inst, Condition::L))
DEF_IT(SETGE, LiftSetcc(inst, Condition::GE))
DEF_IT(SETLE, LiftSetcc(inst, Condition::LE))
DEF_IT(SETG, LiftSetcc(inst, Condition::G))

// Defined in llinstruction-sse.c
DEF_IT(LFENCE, LiftFence(inst))
DEF_IT(SFENCE, LiftFence(inst))
DEF_IT(MFENCE, LiftFence(inst))
DEF_IT(PREFETCHT0, LiftPrefetch(inst, 0, 3))
DEF_IT(PREFETCHT1, LiftPrefetch(inst, 0, 2))
DEF_IT(PREFETCHT2, LiftPrefetch(inst, 0, 1))
DEF_IT(PREFETCHNTA, LiftPrefetch(inst, 0, 0))
DEF_IT(PREFETCHW, LiftPrefetch(inst, 1, 1))
DEF_IT(FXSAVE, LiftFxsave(inst))
DEF_IT(FXRSTOR, LiftFxrstor(inst))
DEF_IT(FSTCW, LiftFstcw(inst))
DEF_IT(FLDCW, goto not_implemented)
DEF_IT(FSTSW, LiftFstsw(inst))
DEF_IT(STMXCSR, LiftStmxcsr(inst))
DEF_IT(LDMXCSR, goto not_implemented)
DEF_IT(SSE_MOVD, LiftSseMovq(inst, Facet::I32))
DEF_IT(SSE_MOVQ, LiftSseMovq(inst, Facet::I64))
DEF_IT(SSE_MOVSS, LiftSseMovScalar(inst, Facet::F32))
DEF_IT(SSE_MOVSD, LiftSseMovScalar(inst, Facet::F64))
DEF_IT(SSE_MOVUPS, LiftSseMovdq(inst, Facet::V4F32, ALIGN_NONE))
DEF_IT(SSE_MOVUPD, LiftSseMovdq(inst, Facet::V2F64, ALIGN_NONE))
DEF_IT(SSE_MOVAPS, LiftSseMovdq(inst, Facet::V4F32, ALIGN_MAX))
DEF_IT(SSE_MOVAPD, LiftSseMovdq(inst, Facet::V2F64, ALIGN_MAX))
DEF_IT(SSE_MOVDQU, LiftSseMovdq(inst, Facet::I128, ALIGN_NONE))
DEF_IT(SSE_MOVDQA, LiftSseMovdq(inst, Facet::I128, ALIGN_MAX))
DEF_IT(SSE_MOVNTPS, LiftSseMovntStore(inst, Facet::VF32))
DEF_IT(SSE_MOVNTPD, LiftSseMovntStore(inst, Facet::VF64))
DEF_IT(SSE_MOVNTDQ, LiftSseMovntStore(inst, Facet::VI64))
// TODO: set non-temporal hint
DEF_IT(SSE_MOVNTDQA, LiftSseMovdq(inst, Facet::I128, ALIGN_MAX))
DEF_IT(SSE_MOVLPS, LiftSseMovlp(inst))
DEF_IT(SSE_MOVLPD, LiftSseMovlp(inst))
DEF_IT(SSE_MOVHPS, LiftSseMovhps(inst))
DEF_IT(SSE_MOVHPD, LiftSseMovhpd(inst))
DEF_IT(SSE_PUNPCKLBW, LiftSseUnpck(inst, Facet::V16I8))
DEF_IT(SSE_PUNPCKLWD, LiftSseUnpck(inst, Facet::V8I16))
DEF_IT(SSE_PUNPCKLDQ, LiftSseUnpck(inst, Facet::V4I32))
DEF_IT(SSE_PUNPCKLQDQ, LiftSseUnpck(inst, Facet::V2I64))
DEF_IT(SSE_PUNPCKHBW, LiftSseUnpck(inst, Facet::V16I8))
DEF_IT(SSE_PUNPCKHWD, LiftSseUnpck(inst, Facet::V8I16))
DEF_IT(SSE_PUNPCKHDQ, LiftSseUnpck(inst, Facet::V4I32))
DEF_IT(SSE_PUNPCKHQDQ, LiftSseUnpck(inst, Facet::V2I64))
DEF_IT(SSE_UNPCKLPS, LiftSseUnpck(inst, Facet::V4F32))
DEF_IT(SSE_UNPCKLPD, LiftSseUnpck(inst, Facet::V2F64))
DEF_IT(SSE_UNPCKHPS, LiftSseUnpck(inst, Facet::V4F32))
DEF_IT(SSE_UNPCKHPD, LiftSseUnpck(inst, Facet::V2F64))
DEF_IT(SSE_SHUFPD, LiftSseShufpd(inst))
DEF_IT(SSE_SHUFPS, LiftSseShufps(inst))
DEF_IT(SSE_PSHUFD, LiftSsePshufd(inst))
DEF_IT(SSE_PSHUFLW, LiftSsePshufw(inst, 0))
DEF_IT(SSE_PSHUFHW, LiftSsePshufw(inst, 4))
DEF_IT(SSE_INSERTPS, LiftSseInsertps(inst))
DEF_IT(SSE_ADDSS, LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::F32))
DEF_IT(SSE_ADDSD, LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::F64))
DEF_IT(SSE_ADDPS, LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::VF32))
DEF_IT(SSE_ADDPD, LiftSseBinOp(inst, llvm::Instruction::FAdd, Facet::VF64))
DEF_IT(SSE_SUBSS, LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::F32))
DEF_IT(SSE_SUBSD, LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::F64))
DEF_IT(SSE_SUBPS, LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::VF32))
DEF_IT(SSE_SUBPD, LiftSseBinOp(inst, llvm::Instruction::FSub, Facet::VF64))
DEF_IT(SSE_MULSS, LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::F32))
DEF_IT(SSE_MULSD, LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::F64))
DEF_IT(SSE_MULPS, LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::VF32))
DEF_IT(SSE_MULPD, LiftSseBinOp(inst, llvm::Instruction::FMul, Facet::VF64))
DEF_IT(SSE_DIVSS, LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::F32))
DEF_IT(SSE_DIVSD, LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::F64))
DEF_IT(SSE_DIVPS, LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::VF32))
DEF_IT(SSE_DIVPD, LiftSseBinOp(inst, llvm::Instruction::FDiv, Facet::VF64))
DEF_IT(SSE_MINSS, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OLT, Facet::F32))
DEF_IT(SSE_MINSD, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OLT, Facet::F64))
DEF_IT(SSE_MINPS, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OLT, Facet::VF32))
DEF_IT(SSE_MINPD, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OLT, Facet::VF64))
DEF_IT(SSE_MAXSS, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OGT, Facet::F32))
DEF_IT(SSE_MAXSD, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OGT, Facet::F64))
DEF_IT(SSE_MAXPS, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OGT, Facet::VF32))
DEF_IT(SSE_MAXPD, LiftSseMinmax(inst, llvm::CmpInst::FCMP_OGT, Facet::VF64))
DEF_IT(SSE_ORPS, LiftSseBinOp(inst, llvm::Instruction::Or, Facet::VI32))
DEF_IT(SSE_ORPD, LiftSseBinOp(inst, llvm::Instruction::Or, Facet::VI64))
DEF_IT(SSE_ANDPS, LiftSseBinOp(inst, llvm::Instruction::And, Facet::VI32))
DEF_IT(SSE_ANDPD, LiftSseBinOp(inst, llvm::Instruction::And, Facet::VI64))
DEF_IT(SSE_XORPS, LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI32))
DEF_IT(SSE_XORPD, LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI64))
DEF_IT(SSE_ANDNPS, LiftSseAndn(inst, Facet::VI32))
DEF_IT(SSE_ANDNPD, LiftSseAndn(inst, Facet::VI64))
DEF_IT(SSE_COMISS, LiftSseComis(inst, Facet::F32))
DEF_IT(SSE_COMISD, LiftSseComis(inst, Facet::F64))
DEF_IT(SSE_UCOMISS, LiftSseComis(inst, Facet::F32))
DEF_IT(SSE_UCOMISD, LiftSseComis(inst, Facet::F64))
DEF_IT(SSE_CMPSS, LiftSseCmp(inst, Facet::F32))
DEF_IT(SSE_CMPSD, LiftSseCmp(inst, Facet::F64))
DEF_IT(SSE_CMPPS, LiftSseCmp(inst, Facet::VF32))
DEF_IT(SSE_CMPPD, LiftSseCmp(inst, Facet::VF64))
DEF_IT(SSE_SQRTSS, LiftSseSqrt(inst, Facet::F32))
DEF_IT(SSE_SQRTSD, LiftSseSqrt(inst, Facet::F64))
DEF_IT(SSE_SQRTPS, LiftSseSqrt(inst, Facet::VF32))
DEF_IT(SSE_SQRTPD, LiftSseSqrt(inst, Facet::VF64))
DEF_IT(SSE_CVTDQ2PD, LiftSseCvt(inst, Facet::V2I32, Facet::V2F64))
DEF_IT(SSE_CVTDQ2PS, LiftSseCvt(inst, Facet::V4I32, Facet::V4F32))
DEF_IT(SSE_CVTPD2DQ, goto not_implemented) // non-truncating, same types as below
DEF_IT(SSE_CVTTPD2DQ, LiftSseCvt(inst, Facet::V2F64, Facet::V2I32))
DEF_IT(SSE_CVTPS2DQ, goto not_implemented) // non-truncating, same types as below
DEF_IT(SSE_CVTTPS2DQ, LiftSseCvt(inst, Facet::V4F32, Facet::V4I32))
DEF_IT(SSE_CVTPD2PS, LiftSseCvt(inst, Facet::V2F64, Facet::V2F32))
DEF_IT(SSE_CVTPS2PD, LiftSseCvt(inst, Facet::V2F32, Facet::V2F64))
DEF_IT(SSE_CVTSD2SS, LiftSseCvt(inst, Facet::F64, Facet::F32))
DEF_IT(SSE_CVTSS2SD, LiftSseCvt(inst, Facet::F32, Facet::F64))
DEF_IT(SSE_CVTSD2SI, goto not_implemented) // non-truncating, same types as below
DEF_IT(SSE_CVTTSD2SI, LiftSseCvt(inst, Facet::F64, Facet::I))
DEF_IT(SSE_CVTSS2SI, goto not_implemented) // non-truncating, same types as below
DEF_IT(SSE_CVTTSS2SI, LiftSseCvt(inst, Facet::F32, Facet::I))
DEF_IT(SSE_CVTSI2SD, LiftSseCvt(inst, Facet::I, Facet::F64))
DEF_IT(SSE_CVTSI2SS, LiftSseCvt(inst, Facet::I, Facet::F32))

DEF_IT(SSE_PXOR, LiftSseBinOp(inst, llvm::Instruction::Xor, Facet::VI64))
DEF_IT(SSE_POR, LiftSseBinOp(inst, llvm::Instruction::Or, Facet::VI64))
DEF_IT(SSE_PAND, LiftSseBinOp(inst, llvm::Instruction::And, Facet::VI64))
DEF_IT(SSE_PANDN, LiftSseAndn(inst, Facet::VI64))
DEF_IT(SSE_PADDB, LiftSseBinOp(inst, llvm::Instruction::Add, Facet::V16I8))
DEF_IT(SSE_PADDW, LiftSseBinOp(inst, llvm::Instruction::Add, Facet::V8I16))
DEF_IT(SSE_PADDD, LiftSseBinOp(inst, llvm::Instruction::Add, Facet::V4I32))
DEF_IT(SSE_PADDQ, LiftSseBinOp(inst, llvm::Instruction::Add, Facet::V2I64))
DEF_IT(SSE_PSUBB, LiftSseBinOp(inst, llvm::Instruction::Sub, Facet::V16I8))
DEF_IT(SSE_PSUBW, LiftSseBinOp(inst, llvm::Instruction::Sub, Facet::V8I16))
DEF_IT(SSE_PSUBD, LiftSseBinOp(inst, llvm::Instruction::Sub, Facet::V4I32))
DEF_IT(SSE_PSUBQ, LiftSseBinOp(inst, llvm::Instruction::Sub, Facet::V2I64))
DEF_IT(SSE_PADDSB, LiftSsePaddsubSaturate(inst, llvm::Instruction::Add, /*sign=*/true, Facet::V16I8))
DEF_IT(SSE_PADDSW, LiftSsePaddsubSaturate(inst, llvm::Instruction::Add, /*sign=*/true, Facet::V8I16))
DEF_IT(SSE_PADDUSB, LiftSsePaddsubSaturate(inst, llvm::Instruction::Add, /*sign=*/false, Facet::V16I8))
DEF_IT(SSE_PADDUSW, LiftSsePaddsubSaturate(inst, llvm::Instruction::Add, /*sign=*/false, Facet::V8I16))
DEF_IT(SSE_PSUBSB, LiftSsePaddsubSaturate(inst, llvm::Instruction::Sub, /*sign=*/true, Facet::V16I8))
DEF_IT(SSE_PSUBSW, LiftSsePaddsubSaturate(inst, llvm::Instruction::Sub, /*sign=*/true, Facet::V8I16))
DEF_IT(SSE_PSUBUSB, LiftSsePaddsubSaturate(inst, llvm::Instruction::Sub, /*sign=*/false, Facet::V16I8))
DEF_IT(SSE_PSUBUSW, LiftSsePaddsubSaturate(inst, llvm::Instruction::Sub, /*sign=*/false, Facet::V8I16))
DEF_IT(SSE_PMULLW, LiftSseBinOp(inst, llvm::Instruction::Mul, Facet::V8I16))
DEF_IT(SSE_PMULLD, LiftSseBinOp(inst, llvm::Instruction::Mul, Facet::V4I32))
DEF_IT(SSE_PSLLW, LiftSsePshiftElement(inst, llvm::Instruction::Shl, Facet::VI16))
DEF_IT(SSE_PSLLD, LiftSsePshiftElement(inst, llvm::Instruction::Shl, Facet::VI32))
DEF_IT(SSE_PSLLQ, LiftSsePshiftElement(inst, llvm::Instruction::Shl, Facet::VI64))
DEF_IT(SSE_PSRLW, LiftSsePshiftElement(inst, llvm::Instruction::LShr, Facet::VI16))
DEF_IT(SSE_PSRLD, LiftSsePshiftElement(inst, llvm::Instruction::LShr, Facet::VI32))
DEF_IT(SSE_PSRLQ, LiftSsePshiftElement(inst, llvm::Instruction::LShr, Facet::VI64))
DEF_IT(SSE_PSRAW, LiftSsePshiftElement(inst, llvm::Instruction::AShr, Facet::VI16))
DEF_IT(SSE_PSRAD, LiftSsePshiftElement(inst, llvm::Instruction::AShr, Facet::VI32))
DEF_IT(SSE_PSLLDQ, LiftSsePshiftBytes(inst))
DEF_IT(SSE_PSRLDQ, LiftSsePshiftBytes(inst))
DEF_IT(SSE_PACKSSWB, LiftSsePack(inst, Facet::VI16, /*sign=*/true))
DEF_IT(SSE_PACKSSDW, LiftSsePack(inst, Facet::VI32, /*sign=*/true))
DEF_IT(SSE_PACKUSWB, LiftSsePack(inst, Facet::VI16, /*sign=*/false))
DEF_IT(SSE_PACKUSDW, LiftSsePack(inst, Facet::VI32, /*sign=*/false))
DEF_IT(SSE_PINSRB, LiftSsePinsr(inst, Facet::VI8, Facet::I8, 0x0f))
DEF_IT(SSE_PINSRW, LiftSsePinsr(inst, Facet::VI16, Facet::I16, 0x07))
DEF_IT(SSE_PINSRD, LiftSsePinsr(inst, Facet::VI32, Facet::I32, 0x03))
DEF_IT(SSE_PINSRQ, LiftSsePinsr(inst, Facet::VI64, Facet::I64, 0x01))
DEF_IT(SSE_PEXTRB, LiftSsePextr(inst, Facet::VI8, 0x0f))
DEF_IT(SSE_PEXTRW, LiftSsePextr(inst, Facet::VI16, 0x07))
DEF_IT(SSE_PEXTRD, LiftSsePextr(inst, Facet::VI32, 0x03))
DEF_IT(SSE_PEXTRQ, LiftSsePextr(inst, Facet::VI64, 0x01))
DEF_IT(SSE_PAVGB, LiftSsePavg(inst, Facet::VI8))
DEF_IT(SSE_PAVGW, LiftSsePavg(inst, Facet::VI16))
DEF_IT(SSE_PMULHW, LiftSsePmulhw(inst, llvm::Instruction::SExt))
DEF_IT(SSE_PMULHUW, LiftSsePmulhw(inst, llvm::Instruction::ZExt))
DEF_IT(SSE_PCMPEQB, LiftSsePcmp(inst, llvm::CmpInst::ICMP_EQ, Facet::VI8))
DEF_IT(SSE_PCMPEQW, LiftSsePcmp(inst, llvm::CmpInst::ICMP_EQ, Facet::VI16))
DEF_IT(SSE_PCMPEQD, LiftSsePcmp(inst, llvm::CmpInst::ICMP_EQ, Facet::VI32))
DEF_IT(SSE_PCMPEQQ, LiftSsePcmp(inst, llvm::CmpInst::ICMP_EQ, Facet::VI64))
DEF_IT(SSE_PCMPGTB, LiftSsePcmp(inst, llvm::CmpInst::ICMP_SGT, Facet::VI8))
DEF_IT(SSE_PCMPGTW, LiftSsePcmp(inst, llvm::CmpInst::ICMP_SGT, Facet::VI16))
DEF_IT(SSE_PCMPGTD, LiftSsePcmp(inst, llvm::CmpInst::ICMP_SGT, Facet::VI32))
DEF_IT(SSE_PCMPGTQ, LiftSsePcmp(inst, llvm::CmpInst::ICMP_SGT, Facet::VI64))
DEF_IT(SSE_PMINUB, LiftSsePminmax(inst, llvm::CmpInst::ICMP_ULT, Facet::VI8))
DEF_IT(SSE_PMINUW, LiftSsePminmax(inst, llvm::CmpInst::ICMP_ULT, Facet::VI16))
DEF_IT(SSE_PMINUD, LiftSsePminmax(inst, llvm::CmpInst::ICMP_ULT, Facet::VI32))
DEF_IT(SSE_PMINSB, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SLT, Facet::VI8))
DEF_IT(SSE_PMINSW, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SLT, Facet::VI16))
DEF_IT(SSE_PMINSD, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SLT, Facet::VI32))
DEF_IT(SSE_PMAXUB, LiftSsePminmax(inst, llvm::CmpInst::ICMP_UGT, Facet::VI8))
DEF_IT(SSE_PMAXUW, LiftSsePminmax(inst, llvm::CmpInst::ICMP_UGT, Facet::VI16))
DEF_IT(SSE_PMAXUD, LiftSsePminmax(inst, llvm::CmpInst::ICMP_UGT, Facet::VI32))
DEF_IT(SSE_PMAXSB, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SGT, Facet::VI8))
DEF_IT(SSE_PMAXSW, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SGT, Facet::VI16))
DEF_IT(SSE_PMAXSD, LiftSsePminmax(inst, llvm::CmpInst::ICMP_SGT, Facet::VI32))
DEF_IT(SSE_PMOVMSKB, LiftSseMovmsk(inst, Facet::VI8))
DEF_IT(SSE_MOVMSKPS, LiftSseMovmsk(inst, Facet::VI32))
DEF_IT(SSE_MOVMSKPD, LiftSseMovmsk(inst, Facet::VI64))

// Jumps are handled in the basic block generation code.
DEF_IT(JMP, LiftJmp(inst))
DEF_IT(JO, LiftJcc(inst, Condition::O))
DEF_IT(JNO, LiftJcc(inst, Condition::NO))
DEF_IT(JC, LiftJcc(inst, Condition::C))
DEF_IT(JNC, LiftJcc(inst, Condition::NC))
DEF_IT(JZ, LiftJcc(inst, Condition::Z))
DEF_IT(JNZ, LiftJcc(inst, Condition::NZ))
DEF_IT(JBE, LiftJcc(inst, Condition::BE))
DEF_IT(JA, LiftJcc(inst, Condition::A))
DEF_IT(JS, LiftJcc(inst, Condition::S))
DEF_IT(JNS, LiftJcc(inst, Condition::NS))
DEF_IT(JP, LiftJcc(inst, Condition::P))
DEF_IT(JNP, LiftJcc(inst, Condition::NP))
DEF_IT(JL, LiftJcc(inst, Condition::L))
DEF_IT(JGE, LiftJcc(inst, Condition::GE))
DEF_IT(JLE, LiftJcc(inst, Condition::LE))
DEF_IT(JG, LiftJcc(inst, Condition::G))
DEF_IT(JCXZ, LiftJcxz(inst))
DEF_IT(LOOP, LiftLoop(inst))
DEF_IT(LOOPZ, LiftLoop(inst))
DEF_IT(LOOPNZ, LiftLoop(inst))
