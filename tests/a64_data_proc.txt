code="add x1, x2, x3"           x1=q:0x0 x2=q:0x12345678 x3=q:0x76543210 => x1=q:0x88888888
code="add x1, x2, x3, lsl #8"   x1=q:0x0 x2=q:0x0        x3=q:0xff       => x1=q:0xff00
code="add x1, x2, x3, lsr #8"   x1=q:0x0 x2=q:0x0        x3=q:0xff00     => x1=q:0x00ff
code="add x1, x2, x3, asr #8"   x1=q:0x0 x2=q:0x0        x3=q:0xff00     => x1=q:0x00ff
code="add sp, x4, #48"          sp=q:0x0 x4=q:0x0                        => sp=q:0x30

code="adds x0, x1, #1, lsl #12" x0=q:0x0 x1=q:0x1                   n=00 z=00 c=00 v=00 => x0=q:0x1001         n=00 z=00 c=00 v=00
code="adds w0, w1, w2"          x0=q:0x0 x1=q:2147483647  x2=q:1    n=00 z=00 c=00 v=00 => x0=0000008000000000 n=01 z=00 c=00 v=01

code="sub x1, x2, x3"           x1=q:0x0 x2=q:100 x3=q:90       => x1=q:10
code="sub x1, x2, x3, lsl #8"   x1=q:0x0 x2=q:257 x3=q:1        => x1=q:1
code="sub x1, x2, x3, lsr #8"   x1=q:0x0 x2=q:2   x3=q:256      => x1=q:1
code="sub x1, x2, x3, asr #8"   x1=q:0x0 x2=q:0   x3=q:-1024    => x1=q:4
code="sub sp, x4, #48"          sp=q:0x0 x4=q:64                => sp=q:16

code="cmp x1, x2" x1=q:0  x2=q:0 n=00 z=00 c=00 v=00 => n=00 z=01 c=01 v=00
code="cmp x1, x2" x1=q:0  x2=q:1 n=00 z=00 c=00 v=00 => n=01 z=00 c=00 v=00
code="cmp x1, x2" x1=q:1  x2=q:0 n=00 z=00 c=00 v=00 => n=00 z=00 c=01 v=00
code="cmp x1, x2" x1=q:-1 x2=q:0 n=00 z=00 c=00 v=00 => n=01 z=00 c=01 v=00
code="cmp x1, x2" x1=q:-1 x2=q:1 n=00 z=00 c=00 v=00 => n=01 z=00 c=01 v=00

code="cmn x1, x2" x1=q:0  x2=q:0 n=00 z=00 c=00 v=00 => n=00 z=01 c=00 v=00
code="cmn x1, x2" x1=q:0  x2=q:1 n=00 z=00 c=00 v=00 => n=00 z=00 c=00 v=00
code="cmn x1, x2" x1=q:1  x2=q:0 n=00 z=00 c=00 v=00 => n=00 z=00 c=00 v=00
code="cmn x1, x2" x1=q:-1 x2=q:0 n=00 z=00 c=00 v=00 => n=01 z=00 c=00 v=00
code="cmn x1, x2" x1=q:-1 x2=q:1 n=00 z=00 c=00 v=00 => n=00 z=01 c=01 v=00

code="mov w0, w1" x0=q:0x0 x1=aabbccddffffffff => x0=aabbccdd00000000
code="mov x0, x1" x0=q:0x0 x1=ffffffffffffffff => x0=ffffffffffffffff
code="mvn x0, x1" x0=q:0x0 x1=fff0fff00fff00ff => x0=000f000ff000ff00

code="mov w0, #1234"   x0=q:0x0            => x0=q:1234
code="mov w0, #0xffff" x0=q:0x0            => x0=ffff000000000000
code="mov w0, #0xffff" x0=f0f0f0f0f0f0f0f0 => x0=ffff000000000000
code="mov x0, #0xffff" x0=f0f0f0f0f0f0f0f0 => x0=ffff000000000000

# XXX cannot test adrp: test_assembler: [...]: Assertion `false && "relocations not supported"' failed.
# This reads "adrp x0, imm=0"
code=".4byte 0x90000000"            => x0=q:0x1000000
# The lowest 12 bits are always zero.
code="mov x0, 0; .4byte 0x90000000" => x0=q:0x1000000
# This reads "adrp x0, imm=1"
code=".4byte 0xb0000000"            => x0=q:0x1001000
code="mov x0, 0; .4byte 0xb0000000" => x0=q:0x1001000
code="adr x0, ."         => x0=q:0x1000000
code="adr x0, foo; foo:" => x0=q:0x1000004

code="and x0, x0, #0xff"   x0=q:0xaabb => x0=q:0xbb
code="orr x0, x0, #0x100"  x0=q:0x0    => x0=q:0x100
code="eor w0, w0, #1"      x0=q:0x1    => x0=q:0x0
code="ands x0, x0, #1"     x0=q:0x0        n=00 z=00 c=00 v=00 => x0=q:0x0 n=00 z=01 c=00 v=00
code="tst w0, #0xffff0000" x0=q:0xffff0000 n=00 z=00 c=00 v=00 => n=01 z=00 c=00 v=00

code="and x0, x1, x2"  x0=q:0x0 x1=q:0xaabb     x2=q:0xff  => x0=q:0xbb
code="bic x0, x1, x2"  x0=q:0x0 x1=q:0xaabb     x2=q:0xff  => x0=q:0xaa00
code="orr x0, x1, x2"  x0=q:0x0 x1=q:0x0        x2=q:0x100 => x0=q:0x100
code="orn x0, x1, x2"  x0=q:0x0 x1=q:0x0        x2=q:0x100 => x0=q:0xfffffffffffffeff
code="eor w0, w1, w2"  x0=q:0x0 x1=q:0x1        x2=q:0x1   => x0=q:0x0
code="eon w0, w1, w2"  x0=q:0x0 x1=q:0x1        x2=q:0x1   => x0=q:0xffffffff
code="ands w0, w1, w2" x0=q:0x0 x1=q:0x0        x2=q:0x1        n=00 z=00 c=00 v=00 => x0=q:0x0 n=00 z=01 c=00 v=00
code="tst w1, w2"               x1=q:0xffff0000 x2=q:0xffff0000 n=00 z=00 c=00 v=00 => n=01 z=00 c=00 v=00

code="udiv x0, x1, x2" x0=q:0 x1=q:100 x2=q:25  => x0=q:4
code="udiv w0, w1, w2" x0=q:0 x1=q:301 x2=q:12  => x0=q:25
code="sdiv x0, x1, x2" x0=q:0 x1=q:100 x2=q:-25 => x0=q:-4
code="sdiv w0, w1, w2" x0=q:0 x1=q:-301 x2=q:12 => x0=e7ffffff00000000
code="udiv x0, x1, x2" x0=q:1 x1=q:100 x2=q:0                   => x0=q:0
code="sdiv w0, w1, w2" x0=q:0 x1=q:-2147483648 x2=q:-1          => x0=0000008000000000
code="sdiv x0, x1, x2" x0=q:0 x1=q:-9223372036854775808 x2=q:-1 => x0=q:-9223372036854775808

code="lslv x0, x1, x2" x0=q:0 x1=q:0xff x2=q:8  => x0=q:0xff00
code="lslv x0, x1, x2" x0=q:0 x1=q:0xff x2=q:63 => x0=q:0x8000000000000000
code="lslv x0, x1, x2" x0=q:0 x1=q:0xff x2=q:72 => x0=q:0xff00
code="lslv w0, w1, w2" x0=q:0 x1=q:0xff x2=q:31 => x0=q:0x80000000
code="lslv w0, w1, w2" x0=q:0 x1=q:0xff x2=q:36 => x0=q:0xff0

code="lsrv x0, x1, x2" x0=q:0 x1=q:0xff               x2=q:4  => x0=q:0xf
code="lsrv x0, x1, x2" x0=q:0 x1=q:0xff00000000000000 x2=q:63 => x0=q:0x1
code="lsrv x0, x1, x2" x0=q:0 x1=q:0xff00000000000000 x2=q:72 => x0=q:0x00ff000000000000
code="lsrv w0, w1, w2" x0=q:0 x1=q:0xff000000         x2=q:31 => x0=q:0x1
code="lsrv w0, w1, w2" x0=q:0 x1=q:0xff000000         x2=q:36 => x0=q:0x0ff00000

code="asrv x0, x1, x2" x0=q:0 x1=q:0xff               x2=q:4  => x0=q:0xf
code="asrv x0, x1, x2" x0=q:0 x1=q:0xff00000000000000 x2=q:63 => x0=q:-1
code="asrv x0, x1, x2" x0=q:0 x1=q:0xff00000000000000 x2=q:72 => x0=q:0xffff000000000000
code="asrv w0, w1, w2" x0=q:0 x1=q:0xff000000         x2=q:31 => x0=ffffffff00000000
code="asrv w0, w1, w2" x0=q:0 x1=q:0xff000000         x2=q:36 => x0=q:0xfff00000
